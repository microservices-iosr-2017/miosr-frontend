import axios from 'axios';
import {arrayOf} from 'normalizr';
import RecipesActions from 'actions/RecipesActions';
import RecipeActions from 'actions/RecipeActions';
import createAsync from './create-async';
import recipe, {recipeWithIngredients} from './schemas/recipes';

const RECIPES_PATH = '/api/recipes';
const recipePath = (id) => `${RECIPES_PATH}/${id}`;

const RecipeSource = {
  fetch: {
    request: () => axios.get(RECIPES_PATH),
    success: RecipesActions.fetchSuccess,
    error: RecipesActions.fetchFailure,
    normalized: arrayOf(recipe),
  },
  search: {
    request: (query) => axios.get(RECIPES_PATH, {params: {q: query}}),
    success: RecipesActions.fetchSuccess,
    error: RecipesActions.fetchFailure,
    normalized: arrayOf(recipe),
  },
  get: {
    request: (id) => axios.get(recipePath(id)),
    success: RecipeActions.fetchSuccess,
    error: RecipeActions.fetchFailure,
    normalized: recipeWithIngredients,
  },
  create: {
    request: data => axios.post(RECIPES_PATH, data),
    success: RecipeActions.submitSuccess,
    error: RecipeActions.submitFailure,
    normalized: recipe,
  }
};

export default createAsync(RecipeSource);
