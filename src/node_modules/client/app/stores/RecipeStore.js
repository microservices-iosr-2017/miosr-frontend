import {v4 as uuid} from 'node-uuid';
import flow from 'lodash/fp/flow';
import clone from 'lodash/clone';
import values from 'lodash/fp/values';
import set from 'lodash/fp/set';
import unset from 'lodash/fp/unset';
import omit from 'lodash/fp/omit';
import pickBy from 'lodash/fp/pickBy';
import RecipeActions from 'actions/RecipeActions';
import RecipeSource from 'sources/RecipeSource';
import {nonEmptyIngredient} from 'helpers/IngredientHelper';
import {history} from 'routes';
import alt from '../alt';

const createIngredient = () => ({_id: uuid()});

const stripIds = (ingredients) => ingredients.map(ingredient => omit('_id')(ingredient));

const INITIAL_STATE = {
  recipe: {
    title: '',
    description: '',
    instructions: '',
  },
  ingredients: {},
  err: null,
};

class RecipeStore {
  static config = {
    getState(currentState) {
      return {
        recipe: {
          ...currentState.recipe,
          ingredients: values(currentState.ingredients)
        }
      };
    }
  };

  constructor() {
    this.recipe = INITIAL_STATE.recipe;
    this.ingredients = INITIAL_STATE.ingredients;
    this.err = INITIAL_STATE.err;

    this.bindListeners({
      handleFetchRecipe: RecipeActions.FETCH_RECIPE,
      handleFetchSuccess: RecipeActions.FETCH_SUCCESS,
      handleFetchFailure: RecipeActions.FETCH_FAILURE,
      handleClearRecipe: RecipeActions.CLEAR_RECIPE,
      handleLoadRecipe: RecipeActions.LOAD_RECIPE,
      handleUpdateRecipe: RecipeActions.UPDATE_RECIPE,
      handleSubmitRecipe: RecipeActions.SUBMIT_RECIPE,
      handleSubmitSuccess: RecipeActions.SUBMIT_SUCCESS,
      handleSubmitFailure: RecipeActions.SUBMIT_FAILURE,
      handleAddIngredient: RecipeActions.ADD_INGREDIENT,
      handleRemoveIngredient: RecipeActions.REMOVE_INGREDIENT,
      handleUpdateIngredient: RecipeActions.UPDATE_INGREDIENT,
    });
  }

  handleFetchRecipe(recipeId) {
    RecipeSource.get(recipeId);
  }

  handleFetchSuccess({result, entities}) {
    this.setState({recipe: entities.recipes[result], ingredients: entities.ingredients, err: null});
  }

  handleFetchFailure(err) {
    this.setState({err});
  }

  handleClearRecipe() {
    this.setState(INITIAL_STATE);
  }

  handleLoadRecipe(recipe) {
    this.setState({recipe});
  }

  handleUpdateRecipe({key, value}) {
    this.setState({recipe: {...this.recipe, [key]: value}});
  }

  handleSubmitRecipe() {
    this.setState({ingredients: pickBy(nonEmptyIngredient)(this.ingredients)});
    RecipeSource.create({
      ...this.recipe,
      ingredients: flow(values, stripIds)(this.ingredients)
    });
  }

  handleSubmitSuccess({result}) {
    history.push(`/recipes/${result}`);
  }

  handleSubmitFailure(err) {
    this.setState({err});
  }

  handleAddIngredient() {
    const withId = createIngredient();
    this.setState({ingredients: set(withId._id, withId)(this.ingredients)});
  }

  handleRemoveIngredient(ingredientId) {
    this.setState({ingredients: unset(ingredientId)(this.ingredients)});
  }

  handleUpdateIngredient({ingredientId, key, value}) {
    const updatedIngredient = flow(
      clone,
      set(key, value)
    )(this.ingredients[ingredientId]);
    this.setState({ingredients: set(ingredientId, updatedIngredient)(this.ingredients)});
  }
}

export default alt.createStore(RecipeStore, 'RecipeStore');
