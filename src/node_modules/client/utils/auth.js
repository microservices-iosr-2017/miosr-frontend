import every from 'lodash/fp/every';
import has from 'lodash/fp/has';
import axios from 'axios';
import Cookies from 'js-cookie';
import {NEVER as NEVER_EXPIRE} from './cookies';
import {createException as ex} from './exceptions';
import {redirect} from 'client/sharedjs/redir';

const LOCAL_AUTH_URL = '/auth/local';
const ACCESS_TOKEN_COOKIE_NAME = 'access_token';
const USERID_COOKIE_NAME = 'user';
const REDIRURL_COOKIE_NAME = 'redirUrl';

export const EX = {
  INCORRECT_CREDENTIALS: 'INCORRECT_CREDENTIALS',
  NETWORK: 'NETWORK',
  UNKNOWN: 'UNKNOWN',
};

const RESPONSE_EX = {
  403: EX.INCORRECT_CREDENTIALS,
  _: EX.UNKNOWN,
};

const REQUEST_HEADERS = {
  'Content-type': 'application/json',
  'Accept': 'application/json',
};

const exName = (status) => status ? RESPONSE_EX[status] || RESPONSE_EX._ : EX.NETWORK;
const validResponse = (data) => every(prop => has(prop)(data))(['userId', 'redirectUrl']);

/**
 * Attempts to contact login service.
 * Service is expected to return:
 *  200 with reponse {redirectUrl: <rootRelativeUrl>, userId: <>}, or
 *  403
 *
 * @param {String} username
 * @param {String} password - plaintext password
 * @returns {Promise} resolve(response payload), reject(Error(reason for failure))
 * Error type (err.name):
 * * INCORRECT_CREDENTIALS
 * * NETWORK - communication with server wasn't successful
 * * UNKNOWN - response was received, but authentication failed
 */
export function login(username, password) {
  return axios.post(LOCAL_AUTH_URL, {username, password}, {headers: REQUEST_HEADERS})
    .catch(({response, message}) => {
      throw ex(exName(response.status), response.status || message);
    })
    .then(({data}) => {
      if (!validResponse(data)) {
        throw ex(EX.UNKNOWN, `malformed response payload: ${JSON.stringify(data)}`);
      }
      return data;
    })
    .then(data => {
      Cookies.set(USERID_COOKIE_NAME, data.userId, {expires: NEVER_EXPIRE});
      Cookies.set(REDIRURL_COOKIE_NAME, data.redirectUrl, {expires: NEVER_EXPIRE});

      return data;
    });
}

export function logout() {
  Cookies.remove(USERID_COOKIE_NAME);
  Cookies.remove(REDIRURL_COOKIE_NAME);
  Cookies.remove(ACCESS_TOKEN_COOKIE_NAME);

  redirect('/');
}

/**
 * Checks whether 'user' cookie is present and non-empty, returning either true or false
 */
export function isCookiePresent() {
  const cookie = Cookies.get(USERID_COOKIE_NAME);
  return cookie !== undefined && cookie !== '';
}

export function getCachedRedirectionUrl() {
  return Cookies.get(REDIRURL_COOKIE_NAME);
}
