/* eslint prefer-rest-params: 0 */

'use strict';

// Register the Babel require hook
require('babel-register')({
  /* this will be merged with appropriate .babelrc file (and .babelrc has priority)
   * however, babel-register doesn't respect 'only', so it must be specified again here*/
  only: /src\/node_modules/,
});

const chai = require('chai');

// Load Chai assertions
global.expect = chai.expect;
global.assert = chai.assert;
chai.should();

// Load Sinon
global.sinon = require('sinon');

// Initialize Chai plugins
chai.use(require('sinon-chai'));
chai.use(require('chai-as-promised'));
chai.use(require('chai-things'));

global.FactoryGirl = require('factory-girl').promisify(require('bluebird'));
FactoryGirl.setAdapter(require('factory-girl-mongoose').MongooseAdapter);
require('./shared/factories');

const examples = {};

global.sharedExamplesFor = function(name, defs) {
  examples[name] = defs;
};

global.includeExamplesFor = function(name) {
  if (!examples[name]) {
    throw new Error(`No shared examples with name ${name}`);
  }
  examples[name].apply(this, Array.prototype.slice.call(arguments, 1));
};

global.itBehavesLike = function(type) {
  const args = arguments;
  describe(`behaves like "${type}"`, function() {
    includeExamplesFor.apply(this, args);
  });
};
