'use strict';

import 'server';
import User from 'server/api/user/user.model';

var user;
function genUser() {
  user = new User({
    provider: 'local',
    name: 'Fake User',
    email: 'test@example.com',
    password: 'password',
  });
}

describe('User Model', () => {
  before(() => {
    // Clear users before testing
    return User.removeAsync();
  });

  beforeEach(() => {
    genUser();
  });

  afterEach(() => {
    return User.removeAsync();
  });

  it('should begin with no users', () => {
    return User.findAsync({}).should
      .eventually.have.length(0);
  });

  it('should fail when saving a duplicate user', () => {
    return user.saveAsync()
      .then(() => {
        var userDup = genUser();
        return userDup.saveAsync();
      }).should.be.rejected;
  });

  describe('#email', () => {
    it('should fail when saving without an email', () => {
      user.email = '';
      return user.saveAsync().should.be.rejected;
    });
  });

  describe('#password', () => {
    beforeEach(() => {
      return user.saveAsync();
    });

    it('should authenticate user if valid', () => {
      user.authenticate('password').should.be.true;
    });

    it('should not authenticate user if invalid', () => {
      user.authenticate('blah').should.not.be.true;
    });

    it('should remain the same hash unless the password is updated', () => {
      user.name = 'Test User';
      return user.saveAsync()
        .spread((u) => {
          return u.authenticate('password');
        }).should.eventually.be.true;
    });
  });
});
