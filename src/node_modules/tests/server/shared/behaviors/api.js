/* global $response, $token, $entityId, $op */

import app from 'server';
import request from 'supertest-as-promised';
import mongoose from 'mongoose';
import {tokenCookie} from 'tests/server/shared/setup/authenticate';

sharedExamplesFor('JSON response', (getResponse, status = 200) => {
  subject(getResponse);

  it('responds with 200', () => {
    return $subject.expect(status);
  });

  it('responds with JSON', () => {
    return $subject.expect('Content-Type', /json/);
  });
});

sharedExamplesFor('API GET', ({url, getToken}) => {
  def('token', getToken);
  def('response', () => {
    return request(app)
      .get(url)
      .set('Cookie', tokenCookie($token));
  });

  itBehavesLike('JSON response', () => $response);

  subject(() => $response.then(res => res.body));
  it('responds with array of entities', () => {
    return expect($subject).to.eventually.be.instanceOf(Array);
  });
});

sharedExamplesFor('API POST', ({url, factoryName, getToken}) => {
  let data;

  before(async() => {
    data = await FactoryGirl.attrs(factoryName);
  });

  def('token', getToken);
  def('response', () => {
    return request(app)
      .post(url)
      .set('Cookie', tokenCookie($token))
      .send(data);
  });

  itBehavesLike('JSON response', () => $response, 201);

  subject(() => $response.then(res => res.body));
  it('should respond with the newly created entity', () => {
    return expect($subject).to.eventually.include(data);
  });
});

sharedExamplesFor('API entity GET', ({url, factoryName, getToken}) => {
  let entity;

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
  });

  def('token', getToken);
  def('response', () => {
    return request(app)
      .get(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie($token));
  });

  itBehavesLike('JSON response', () => $response);

  subject(() => $response.then(res => res.body));
  it('should respond with the requested entity', () => {
    return expect($subject).to.eventually.have.property('_id').equal(entity._id.toString());
  });
});

sharedExamplesFor('API PUT', ({url, factoryName, getToken}) => {
  let entity;

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
  });

  def('token', getToken);
  def('response', () => {
    return request(app)
      .put(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie($token));
  });

  itBehavesLike('JSON response', () => $response);

  subject(() => $response.then(res => res.body));
  it('should respond with the updated recipe', () => {
    return expect($subject).to.eventually.have.property('_id').equal(entity._id.toString());
  });
});

sharedExamplesFor('API PATCH', ({url, factoryName, property, getToken}) => {
  let entity;

  before(async() => {
    entity = await FactoryGirl.create(factoryName);
  });

  def('token', getToken);
  def('op', () => ({op: 'replace', path: `/${property}`, value: '__test__'}));
  def('response', () => {
    return request(app)
      .patch(`${url}/${entity._id}`)
      .set('Cookie', tokenCookie($token))
      .send([$op]);
  });

  itBehavesLike('JSON response', () => $response);

  subject(() => $response.then(res => res.body));
  it('should respond with the updated recipe', () => {
    return expect($subject).to.eventually.have.property(property).equal('__test__');
  });
});

sharedExamplesFor('API DELETE', ({url, factoryName, getToken}) => {
  def('token', getToken);
  def('response', () => {
    return request(app)
      .delete(`${url}/${$entityId}`)
      .set('Cookie', tokenCookie($token));
  });

  context('when entity exists', () => {
    let entity;

    beforeEach(async() => {
      entity = await FactoryGirl.create(factoryName);
    });

    def('entityId', () => entity._id);

    itBehavesLike('JSON response', () => $response);

    subject(() => $response.then(res => res.body));
    it('should respond with deleted entity', () => {
      return expect($subject).to.eventually.have.property('_id').equal(entity._id.toString());
    });
  });

  context('when entity does not exits', () => {
    def('entityId', () => new mongoose.Types.ObjectId());

    subject(() => $response);
    it('should respond with 404', async() => {
      return $subject.expect(404);
    });
  });
});
