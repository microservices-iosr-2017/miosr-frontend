'use strict';

import app from 'server';
import User from 'server/api/user/user.model';
import request from 'supertest-as-promised';

describe('User API:', () => {
  var user;
  var token;

  // Clear users before testing
  before(() => {
    const name = 'FakeUser';
    const email = 'test@example.com';
    const password = 'test';

    user = new User({name, email, password});

    return user.saveAsync()
      .then(_ => {
        return request(app)
          .post('/auth/local')
          .set('Content-Type', 'application/json')
          .send({username: email, password, transportMethod: 'RES_BODY'})
          .then(res => {
            if(!res.body.accessToken) {
              throw new Error('Access token missing in respnse form local auth service');
            } else {
              token = res.body.accessToken;
            }
          });
      });
  });

  // Clear users after testing
  after(() => {
    return User.removeAsync();
  });

  describe('GET /api/users/me', () => {
    it('should respond with a user profile when authenticated', () => {
      return request(app)
        .get('/api/users/me')
        .set('Content-Type', 'application/json')
        .set('Cookie', `access_token=${token}`)
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => {
          res.body._id.toString().should.equal(user._id.toString());
        });
    });

    it('should respond with a 403 when not authenticated', () => {
      return request(app)
        .get('/api/users/me')
        .expect(403);
    });
  });
});
