'use strict';

import app from 'server';
import request from 'supertest-as-promised';

/* USED IN COMMENTED OUT TESTS
var newFood;*/

describe('Food API:', () => {
  describe('GET /api/foods', () => {
    var foods;

    beforeEach(() => {
      return request(app)
        .get('/api/foods')
        .expect(200)
        .expect('Content-Type', /json/)
        .then(res => { foods = res.body; });
    });

    it('should respond with JSON array', () => {
      foods.should.have.deep.property('list.item');
      foods.list.item.should.be.instanceof(Array);
    });
  });
/* NOT IMPLEMENTED YET
  describe('POST /api/foods', () => {
    beforeEach((done) => {
      request(app)
        .post('/api/foods')
        .send({
          name: 'New Food',
          info: 'This is the brand new food!!!',
        })
        .expect(201)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          newFood = res.body;
          done();
        });
    });

    it('should respond with the newly created food', () => {
      newFood.name.should.equal('New Food');
      newFood.info.should.equal('This is the brand new food!!!');
    });

  });*/
/* DEPENDS ON UNIMPLEMENTED API
  describe('GET /api/foods/:id', () => {
    var food;

    beforeEach((done) => {
      request(app)
        .get('/api/foods/' + newFood._id)
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          food = res.body;
          done();
        });
    });

    afterEach(() => {
      food = {};
    });

    it('should respond with the requested food', () => {
      food.name.should.equal('New Food');
      food.info.should.equal('This is the brand new food!!!');
    });

  });*/
/* NOT IMPLEMENTED
  describe('PUT /api/foods/:id', () => {
    var updatedFood;

    beforeEach((done) => {
      request(app)
        .put('/api/foods/' + newFood._id)
        .send({
          name: 'Updated Food',
          info: 'This is the updated food!!!',
        })
        .expect(200)
        .expect('Content-Type', /json/)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          updatedFood = res.body;
          done();
        });
    });

    afterEach(() => {
      updatedFood = {};
    });

    it('should respond with the updated food', () => {
      updatedFood.name.should.equal('Updated Food');
      updatedFood.info.should.equal('This is the updated food!!!');
    });

  });*/
/*  NOT IMPLEMENTED
  describe('DELETE /api/foods/:id', () => {

    it('should respond with 204 on successful removal', (done) => {
      request(app)
        .delete('/api/foods/' + newFood._id)
        .expect(204)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          done();
        });
    });

    it('should respond with 404 when food does not exist', (done) => {
      request(app)
        .delete('/api/foods/' + newFood._id)
        .expect(404)
        .end((err, res) => {
          if(err) {
            return done(err);
          }
          done();
        });
    });

  });*/
});
