import moment from 'moment';
import Planner from './planner.model';
import BaseController from '../base';
import {respondWithResult, handleError, patchUpdates} from '../common';

const beginningOfWeek = (date) => moment(date).startOf('week');
const endOfWeek = (date) => moment(date).endOf('week');
const beginningOfDay = (date) => moment(date).startOf('day');
const endOfDay = (date) => moment(date).endOf('day');
const dateRange = (from, to) => {
  const range = [];
  const day = from.clone();
  while (day.isSameOrBefore(to)) {
    range.push(day.clone());
    day.add(1, 'day');
  }
  return range;
};

export default class PlannerController extends BaseController(Planner) {
  show(req, res) {
    const from = beginningOfWeek(req.query.date);
    const to = endOfWeek(from);

    return Planner.find({date: {$gte: from.toDate(), $lt: to.toDate()}})
      .populate({path: 'entries.recipe'})
      .exec()
      .then(planner => planner.length > 0 ? planner : Promise.all(dateRange(from, to)
        .map(day => Planner.create({date: day.toDate()}))))
      .then(respondWithResult(res))
      .catch(handleError(res));
  }

  patch(req, res) {
    const from = beginningOfDay(req.query.date);
    const to = endOfDay(from);

    return Planner.findOne({date: {$gte: from.toDate(), $lt: to.toDate()}})
      .exec()
      .then(planner => planner || Planner.create({date: from.toDate()}))
      .then(patchUpdates(req.body))
      .then(planner => Planner.populate(planner, {path: 'entries.recipe'}))
      .then(respondWithResult(res))
      .catch(handleError(res));
  }
}

