import {respondWithResult, handleEntityNotFound, handleError, patchUpdates, removeEntity} from './common';

export default (Model) => class BaseController {
  index(req, res) {
    return Model.find().exec()
      .then(respondWithResult(res))
      .catch(handleError(res));
  }

  show(req, res) {
    return Model.findById(req.params.id).exec()
      .then(handleEntityNotFound(res))
      .then(respondWithResult(res))
      .catch(handleError(res));
  }

  create(req, res) {
    return Model.create(req.body)
      .then(respondWithResult(res, 201))
      .catch(handleError(res));
  }

  upsert(req, res) {
    if (req.body._id) {
      delete req.body._id;
    }
    return Model
      .findOneAndUpdate({_id: req.params.id}, req.body, {
        upsert: true,
        new: true,
        setDefaultsOnInsert: true,
        runValidators: true
      })
      .exec()
      .then(respondWithResult(res))
      .catch(handleError(res));
  }

  patch(req, res) {
    if (req.body._id) {
      delete req.body._id;
    }
    return Model.findById(req.params.id).exec()
      .then(handleEntityNotFound(res))
      .then(patchUpdates(req.body))
      .then(respondWithResult(res))
      .catch(handleError(res));
  }

  destroy(req, res) {
    return Model.findById(req.params.id).exec()
      .then(handleEntityNotFound(res))
      .then(removeEntity())
      .then(respondWithResult(res))
      .catch(handleError(res));
  }
};
